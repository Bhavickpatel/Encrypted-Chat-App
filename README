First server binds to the socket.
Then client1 tries to connect. Server spawns a new thread and accepts the connection. 
Client1 starts taking user input from the terminal and sends to the server requesting for different files(f1.txt, f2.txt). 
Server sends the given file if it exists with the server else nothing is sent. (Always a notification is sent to client regarding the existence of the file)
Now Client2 tries to connect. Server spawns a new thread and accepts the connection. 
Client1 starts taking user input from the terminal and sends to the server requesting for different files(f3.txt, f4 (exec file)).
Server sends the given file if it exists with the server else nothing is sent. (Always a notification is sent to the client regarding the existence of the file). (in parallel to Client1’s requests).
Server also sends the permission bits in a char file to the respective client regarding the file requested.
Clients receinve the permission bits for the file and modify the file permissions accordingly.
Now client2 quits and the socket is closed on both ends.
Now client1 quits and the socket is closed on both ends.
Server is still “serving” and can be stopped by pressing Ctrl+C keys.
Server quits and execution ends.

The above scenario can be depicted for 5 clients and also the Maximum Limit Reached case works fine.

Commands for executing : 
Server terminal

gcc server.c -o serv -lpthread
./s IP_no Port_no

Client terminal
gcc client.c -o cli -lpthread
./c IP_no Port_no


